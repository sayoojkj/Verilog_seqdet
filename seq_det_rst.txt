Design

module seq_det(input clk,
               input x,
               input rst,
               output reg z);
  reg[1:0] cstate,nstate;
  parameter S0=2'b00 ,S1=2'b01 ,S2=2'b10 ;
  always @(posedge clk or rst)
    begin
      if(rst)
        cstate<=S0;
      else
        cstate<=nstate;
    end
  always @(cstate or x)
    case(cstate)
      S0:begin
        nstate<=x?S0:S1;
        z<=0;
      end
      S1:begin
        nstate<=x?S1:S2;
        z<=0;
      end
      S2:begin
        nstate<=x?S1:S0;
        z<=x?1:0;
      end
      default:begin
        nstate<=S0;
        z<=0;
      end
    endcase
endmodule
      
Testbench

module seq_test;
  reg clk,x,rst;
  wire z;
  seq_det dut(clk,x,rst,z);
  always #5 clk=~clk;
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0);
    clk=1'b0;
    rst=1'b1;
    #5 rst=1'b0;
  end
  initial begin
    #2 x=0; #10 x=1; #10 x=1; #10 x=0;
      #10 x=1; #10 x=1; #10 x=0; #10 x=1;
  	  #10 $finish;
  end
  initial begin
    $monitor("x = %b, z = %b", x, z);
  end
endmodule